{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021/code-spitz-85/","result":{"data":{"site":{"siteMetadata":{"title":"woo jeongmin","siteUrl":"https://woojeongmin.com"}},"markdownRemark":{"id":"ad59a05f-7bb1-5693-9bb7-5759cff9ccf2","excerpt":"코드스피츠 85 거침없는 자바스크립트 1강 자바스크립트 개괄 ES6에서 일어난 일 Class, Object Literal이 새롭게 정의됨 Arrow 함수: 기존 함수가 클래스로 대체하는 기능까지 갖고 있어서 무거웠던 것에 비해 Arrow…","html":"<p><a href=\"https://www.youtube.com/playlist?list=PLBNdLLaRx_rImvbuZnfO-Ecv9OpuCNoCl\">코드스피츠 85 거침없는 자바스크립트</a></p>\n<hr>\n<h2 id=\"1강\" style=\"position:relative;\"><a href=\"#1%EA%B0%95\" aria-label=\"1강 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1강</h2>\n<h3 id=\"자바스크립트-개괄\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B0%9C%EA%B4%84\" aria-label=\"자바스크립트 개괄 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 개괄</h3>\n<p><strong>ES6에서 일어난 일</strong></p>\n<ul>\n<li>Class, Object Literal이 새롭게 정의됨</li>\n<li>Arrow 함수: 기존 함수가 클래스로 대체하는 기능까지 갖고 있어서 무거웠던 것에 비해 Arrow 함수는 순수한 함수만 지향하기 때문에 순수한 함수를 만들 수 있음</li>\n<li>Iterator, Generator, For of</li>\n<li>const, let</li>\n<li>destructuring, rest, spread, 에 더하여 undefined의 재정의</li>\n<li>Template string</li>\n<li>Symbol, Promise, Map, Set, WeakMap, WeakSet, Proxy, Reflect 내장객체 추가</li>\n</ul>\n<p><strong>ES7~10, Stage 3</strong></p>\n<ul>\n<li>7: 중첩된 rest 해체 <em>(const [a, …[b, …c] = [1. 2, 3, 4] (a = 1, b = 2, c = [3, 4])</em></li>\n<li>8: <strong>async/await</strong>, <strong>shared memory</strong><sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>, <strong>atomics</strong></li>\n<li>9: object 해체, <strong>asynchronous iterators</strong></li>\n<li>10: optional catch</li>\n<li>Stage 3 (11): BigInt, globalThis, <strong>top level await</strong>, class field, private field/method, optional chaining <em>(?.)</em>, nullish coalescing <em>(??)</em>, WeakReference</li>\n</ul>\n<h3 id=\"program\" style=\"position:relative;\"><a href=\"#program\" aria-label=\"program permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Program</h3>\n<p><strong>Program &#x26; Timing, 그리고 자바스크립트</strong></p>\n<table>\n<thead>\n<tr>\n<th>Timing</th>\n<th>Javascript</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Language code</td>\n<td>ES2020, TypeScript…</td>\n</tr>\n<tr>\n<td>Machine language</td>\n<td>Transpiler</td>\n</tr>\n<tr>\n<td>File</td>\n<td>File &#x26; Deploy</td>\n</tr>\n<tr>\n<td>Load</td>\n<td>Browser load, Broswer parsing</td>\n</tr>\n<tr>\n<td>Run</td>\n<td>Run (Browser load, Browser parsing, Run 반복…)</td>\n</tr>\n<tr>\n<td>Terminate</td>\n<td>Browser close</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Runtime Details</strong></p>\n<ul>\n<li>Essintial definition loading</li>\n<li>Vtable mapping</li>\n<li>Run</li>\n<li>Runtime definition loading</li>\n<li>Run</li>\n<li>(Runtime definition loading, Run 반복…)</li>\n</ul>\n<p><strong>자바스크립트 Runtime Details</strong></p>\n<p>자바스크립트에도 runtime과 declare time을 나눌 수 있는 기준이 존재한다.</p>\n<ul>\n<li>Declare base functions, classes…</li>\n<li>Declare extended functions, classes… <em>(declare time)</em></li>\n<li>Client code execute <em>(runtime)</em></li>\n<li>(Declare extended functions, classess…; Client code execute 반복)</li>\n</ul>\n<h3 id=\"state-control\" style=\"position:relative;\"><a href=\"#state-control\" aria-label=\"state control permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State Control</h3>\n<p><strong>직접 참조 vs 간접 참조</strong></p>\n<p>직접 참조 시 의존성이 생기므로 데이터가 변경되면 에러가 발생할 위험이 있다.</p>\n<div class=\"gatsby-code-title\">directive_reference</div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\">a <span class=\"token operator\">=</span> <span class=\"token string\">\"TEST\"</span>\nb <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a\nc <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b\n<span class=\"token comment\">// b == c</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nd <span class=\"token operator\">=</span> <span class=\"token string\">\"ABC\"</span>\nb <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d\n<span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// b != c</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>간접 참조 시 참조의 공개 안정성이 확보되어 데이터가 변경되어도 싱크가 깨지지 않는다.</p>\n<div class=\"gatsby-code-title\">indirective_reference</div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\">a <span class=\"token operator\">=</span> <span class=\"token string\">\"TEST\"</span>\nb <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> target <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a <span class=\"token punctuation\">}</span>\nc <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b\n<span class=\"token comment\">// b == c</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nd <span class=\"token operator\">=</span> <span class=\"token string\">\"ABC\"</span>\nb<span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d\n<span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// b == c</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>런타임에 추가적인 메모리 연산을 함으로써 참조 간의 컨텍스트가 깨지지 않게 만들 수 있다. 즉, 변화에 더 강하다. 이 원리를 응용하여 연결 리스트, 디자인 패턴, 그리고 객체지향의 인터페이스 및 추상클래스를 만든다.</p>\n<h3 id=\"flow-control\" style=\"position:relative;\"><a href=\"#flow-control\" aria-label=\"flow control permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flow Control</h3>\n<p><strong>Sync flow control</strong></p>\n<p>Sync Flow: 메모리에 적재된 명령이 순차적으로 실행됨.</p>\n<p>Sync Flow Control: Goto를 통해 명령의 위치를 이동함.</p>\n<p>Sub Flow: 함수 등을 통해 별도의 명령셋을 여러번 실행함.</p>\n<p>DIP과 IOC <a href=\"https://justhackem.wordpress.com/2016/05/13/dependency-inversion-terms/\">참고</a></p>\n<p><strong>Blocking</strong></p>\n<p>Sync Flow가 실행되는 동안 다른 일을 할 수 없는 현상</p>\n<p>노이만 머신의 메모리에 적재된 명령은 모두 Blocking 코드. Non-blocking 코드는 원래 존재하지 않음.</p>\n<p><strong>Blocking을 줄이기 위해서는…</strong></p>\n<ul>\n<li><del>Sync Flow를 짧게 하기</del>\u001c</li>\n<li><strong>다른 스레드에 Sync Flow 떠넘기기 (메인 스레드의 Sync Flow를 최대한 줄이기)</strong></li>\n</ul>\n<p>멀티스레딩을 사용하면 <em>concurrency 이슈</em>가 생김\u001b. 동기화 명령 사이에 이벤트 루프가 작동하여 다른 스레드의 작업을 기다림.</p>\n<p>Non-blocking: Sync Flow가 납득할만한 시간 내에 종료되는 것. Non-blocking을 추구하는 것은 메인스레드를 최소화하는 것과 동일하다.</p>\n<h3 id=\"async\" style=\"position:relative;\"><a href=\"#async\" aria-label=\"async permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Async</h3>\n<p><strong>Sync &#x26; Async</strong></p>\n<p>Sync: 서브루틴이 즉시 값을 반환함</p>\n<p>Async: 서브루틴이 <strong>다른 수단</strong><sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>으로 값을 반환함</p>\n<p>예를들어 함수가 Promise 객체를 즉시 반환하면 원하는 값이 아닌 Promise 객체를 반환했으므로 Async 함수이다.</p>\n<p>다른 수단?</p>\n<p><strong>Async 단점</strong></p>\n<ul>\n<li>호출결과가 즉시 반환되지 않으므로 현재의 Sync Flow가 종료됨</li>\n<li>그 결과 현재의 어휘공간<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup> 내의 상태를 결과시점에 사용할 수 없음</li>\n<li>요청 시의 상태를 별도로 결과시점에 전달할 부가장치 필요</li>\n</ul>\n<p><strong>Sync의 장점 + Async의 장점</strong></p>\n<p>인간이 Sync 로직으로 사고하는 것이 일반적이기 때문에 Sync 로직으로 Async를 사용할 수 있게 함. 하지만 Sync Flow가 어긋나므로 이전 Sync Flow의 상태를 기억하여 이어줄 장치가 필요하다. 상태를 기억하고 이어주는 장치를 Continuation이라 하고 이를 활용하는 프로그래밍 스타일이 <strong>C</strong>ontinuation <strong>P</strong>assing <strong>S</strong>tyle이다.</p>\n<p>어렵다… 어려워…</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>shared memory는 2018년 스펙터 오류로 인해 셧다운되었다가 패치 이후 정상 동작한다.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>Promise, Callback function, Iterations <em>(Async iterator)</em></p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>검색해보니 어휘적 환경과 동일한 용어인 것 같은데 어떤 것인지 공부 필요</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/2021/code-spitz-85/#1%EA%B0%95\">1강</a></p>\n<ul>\n<li><a href=\"/2021/code-spitz-85/#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B0%9C%EA%B4%84\">자바스크립트 개괄</a></li>\n<li><a href=\"/2021/code-spitz-85/#program\">Program</a></li>\n<li><a href=\"/2021/code-spitz-85/#state-control\">State Control</a></li>\n<li><a href=\"/2021/code-spitz-85/#flow-control\">Flow Control</a></li>\n<li><a href=\"/2021/code-spitz-85/#async\">Async</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"코드스피츠 85 - 거침없는 자바스크립트 정리","date":"July 08, 2021","description":null,"tags":["Javascript"],"cover":null}},"previous":{"fields":{"slug":"/2021/vanilla-js-mvc-todolist/"},"frontmatter":{"title":"[Vanilla JS] MVC To-Do List"}},"next":{"fields":{"slug":"/2021/youtube-clone/"},"frontmatter":{"title":"클론 코딩: 유튜브 클론사이트 구현"}}},"pageContext":{"id":"ad59a05f-7bb1-5693-9bb7-5759cff9ccf2","previousPostId":"ab64341a-09cf-541b-bb49-171bddc90354","nextPostId":"45faa129-5677-57b5-9562-7a733f4dfcf4"}},"staticQueryHashes":["1152384417","2706681444","3540528984"]}