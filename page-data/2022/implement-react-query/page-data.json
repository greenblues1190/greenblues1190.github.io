{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022/implement-react-query/","result":{"data":{"site":{"siteMetadata":{"title":"woo jeongmin","siteUrl":"https://woojeongmin.com"}},"markdownRemark":{"id":"1f62bdf5-3f65-51bf-9cad-87e7421dc6fc","excerpt":"프로젝트를 시작하며 react-query를 직접 구현해보기로 했습니다. react-query…","html":"<p>프로젝트를 시작하며 <a href=\"https://tanstack.com/query/v4\">react-query</a>를 직접 구현해보기로 했습니다. react-query가 최근 인기있는 라이브러리지만 작동 원리를 정확히 모르는 상태에서 사용하는 것은 복잡한 기능 추가나 에러 발생 시 병목 요인이 될 수 있기에 기술 부채가 될 수 있다고 생각했습니다.</p>\n<h2 id=\"왜-react-query인가\" style=\"position:relative;\"><a href=\"#%EC%99%9C-react-query%EC%9D%B8%EA%B0%80\" aria-label=\"왜 react query인가 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 react-query인가</h2>\n<p>서버-클라이언트 아키텍쳐를 사용하는 웹 어플리케이션에는 <strong>서버 상태</strong>와 <strong>클라이언트 상태</strong>가 존재합니다.</p>\n<ul>\n<li><strong>서버 상태</strong>: 서버에 저장되어 있는 데이터로, 비동기 요청을 통해 클라이언트에 캐싱됩니다. 클라이언트에 캐싱된 데이터와 서버 상태가 동일한지 확신할 수 없습니다.</li>\n<li><strong>클라이언트 상태</strong>: 서버로부터 독립적인 클라이언트의 데이터입니다. 클라이언트에서만 사용되는 UI 로직 등에 사용됩니다. 컴포넌트 레벨로 격리시키면 컴포넌트의 재사용성을 높입니다. 전역 상태는 Context API로 전달하거나 상태 관리 라이브러리를 사용하는 편입니다.</li>\n</ul>\n<p>react-query는 클라이언트에서 서버 상태를 최소한의 코드로 관리할 수 있게 하는 라이브러리입니다. 그 과정에서 비동기 요청으로 서버 상태를 캐싱하고 비동기 요청에 대한 상태를 자동 관리합니다. 아래는 체크메이트 서비스에 react-query를 도입하고 싶게 만들었던 몇가지 특징입니다.</p>\n<ul>\n<li><strong>react hook</strong>으로 구현되어 있습니다.</li>\n<li><strong>stale-while-revalidate</strong> 전략으로 캐싱된 데이터를 즉시 반환하는 동시에 백그라운드 요청을 통해 재검증합니다.</li>\n<li>페칭 상태에 대한 추가 로직을 <strong>선언적</strong>으로 작성할 수 있습니다.</li>\n<li>자체적으로 <strong>DevTools</strong>를 지원하여 개발 시 디버그가 편리합니다.</li>\n</ul>\n<h2 id=\"react-query-분석\" style=\"position:relative;\"><a href=\"#react-query-%EB%B6%84%EC%84%9D\" aria-label=\"react query 분석 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react-query 분석</h2>\n<h3 id=\"query-function과-mutation-function\" style=\"position:relative;\"><a href=\"#query-function%EA%B3%BC-mutation-function\" aria-label=\"query function과 mutation function permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query Function과 Mutation Function</h3>\n<p>react-query에서는 비동기 요청을 <strong>query</strong>와 <strong>mutation</strong>으로 구분합니다. query는 서버 상태를 가져오기 위한 요청, mutation은 데이터를 생성/수정/삭제하거나 서버 사이드 이펙트를 수행하기 위한 요청입니다.</p>\n<p>react-query는 특정 라이브러리에 의존성이 없습니다. <code class=\"language-text\">Promise</code> 객체를 반환하는 어떤 비동기 함수라도 query function과 mutation function으로 사용할 수 있습니다. <code class=\"language-text\">Promise</code> 객체를 반환해야만 하는 이유는 react-query가 에러 감지를 할 수 있게 하기 위함입니다.</p>\n<h3 id=\"usequery\" style=\"position:relative;\"><a href=\"#usequery\" aria-label=\"usequery permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useQuery</h3>\n<p>query function으로 서버 데이터를 요청하고 캐싱, 재요청, 자동 상태관리를 하는 훅입니다. 다음과 같은 형태로 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// react-query v3 기준</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"todos\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fetchAllTodos<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// tanstack-query v4 기준</span>\n<span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> result <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> queryKey<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"todos\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> queryFn<span class=\"token operator\">:</span> fetchAllTodos <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>배열 형태의 query keys와 query function, query options를 매개변수로 전달받습니다. v4에서 기존 매개변수 형태에 <code class=\"language-text\">QueryOptions</code> 객체 형태로도 받을 수 있도록 오버로딩이 추가되었으나 이번 프로젝트에서는 v3의 형태로만 사용했습니다.</p>\n<h4 id=\"query-keys\" style=\"position:relative;\"><a href=\"#query-keys\" aria-label=\"query keys permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query Keys</h4>\n<p>react-query가 쿼리를 구분하는 고유한 키값의 배열입니다. react-query 내부에서 리페칭, 캐싱, 다른 곳에 쿼리 공유에 사용합니다.</p>\n<p>유용하다고 느꼈던 부분은 비동기 함수 내에서 사용하는 값이 동적으로 업데이트되어야 하는 경우입니다. query keys는 <a href=\"https://react-query-v3.tanstack.com/guides/query-functions#query-function-variables\">query function의 인자로 전달되어 함수 내부에서 사용할 수 있습니다.</a> 비동기 함수를 커링으로 감싸 동적으로 변하는 값을 인자로 전달하지 않아도 자동으로 주입되어 편리했습니다.</p>\n<h4 id=\"query-options\" style=\"position:relative;\"><a href=\"#query-options\" aria-label=\"query options permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query Options</h4>\n<p>옵션 객체를 전달해 react-query의 다양한 기능을 제어합니다. 요청 가능 여부, 요청 재시도 최대 횟수, 마운트/렌더링 시 리페치 여부, stale time, cache time 등의 설정값과 페칭 상태에 대한 콜백 함수로 구성되어 있습니다.</p>\n<h4 id=\"반환값\" style=\"position:relative;\"><a href=\"#%EB%B0%98%ED%99%98%EA%B0%92\" aria-label=\"반환값 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반환값</h4>\n<p>데이터, 에러, 페칭 상태, 페칭 상태에서 파생된 flag들을 반환합니다.</p>\n<ul>\n<li>쿼리 상태의 경우 <code class=\"language-text\">status</code>라는 문자열로 관리합니다.</li>\n<li>status에 따라 <code class=\"language-text\">is~</code> 형태의 flag 변수도 파생하여 반환하기 때문에 컴포넌트에서 각각의 상태에 따라 조건문을 편리하게 작성할 수 있도록 한 것 같습니다.</li>\n<li>쿼리 상태가 <code class=\"language-text\">success</code>인 경우 페칭 데이터를 <code class=\"language-text\">data</code> 프로퍼티로 접근할 수 있습니다.</li>\n<li>쿼리 상태가 <code class=\"language-text\">error</code>인 경우 throw(혹은 Promise에서 rejected)된 에러 객체를 <code class=\"language-text\">error</code> 프로퍼티로 접근할 수 있습니다.</li>\n</ul>\n<h3 id=\"usemutation\" style=\"position:relative;\"><a href=\"#usemutation\" aria-label=\"usemutation permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useMutation</h3>\n<p>useQuery와 비슷하지만 query keys를 사용하지 않습니다. 데이터, 에러, 상태와 함께 요청 트리거에 사용할 수 있는 <code class=\"language-text\">mutate</code> 함수를 반환합니다.</p>\n<h3 id=\"queryclient\" style=\"position:relative;\"><a href=\"#queryclient\" aria-label=\"queryclient permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>QueryClient</h3>\n<p>query, mutationm, cache과 함께 다양한 상태를 저장하는 객체이며 해당 값들을 구독, 조작하기 위한 다양한 기능을 제공합니다. query client는 query, mutation, cache 조작을 위한 다양한 기능을 제공하지만 훅으로 충분하다고 생각하여 캐싱과 invalidation에만 주목했습니다.</p>","tableOfContents":"<ul>\n<li><a href=\"/2022/implement-react-query/#%EC%99%9C-react-query%EC%9D%B8%EA%B0%80\">왜 react-query인가</a></li>\n<li>\n<p><a href=\"/2022/implement-react-query/#react-query-%EB%B6%84%EC%84%9D\">react-query 분석</a></p>\n<ul>\n<li><a href=\"/2022/implement-react-query/#query-function%EA%B3%BC-mutation-function\">Query Function과 Mutation Function</a></li>\n<li>\n<p><a href=\"/2022/implement-react-query/#usequery\">useQuery</a></p>\n<ul>\n<li><a href=\"/2022/implement-react-query/#query-keys\">Query Keys</a></li>\n<li><a href=\"/2022/implement-react-query/#query-options\">Query Options</a></li>\n<li><a href=\"/2022/implement-react-query/#%EB%B0%98%ED%99%98%EA%B0%92\">반환값</a></li>\n</ul>\n</li>\n<li><a href=\"/2022/implement-react-query/#usemutation\">useMutation</a></li>\n<li><a href=\"/2022/implement-react-query/#queryclient\">QueryClient</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"나만의 react-query 구현기 (WIP)","date":"November 02, 2022","description":null,"tags":["frontend","react"],"cover":null}},"previous":{"fields":{"slug":"/2022/how-to-git/"},"frontmatter":{"title":"Git 활용팁"}},"next":{"fields":{"slug":"/2022/secure-coding/"},"frontmatter":{"title":"애플리케이션 보안과 시큐어 코딩"}}},"pageContext":{"id":"1f62bdf5-3f65-51bf-9cad-87e7421dc6fc","previousPostId":"1e576f59-850e-54b0-a190-c904d3b1d1bf","nextPostId":"6e3ddb62-67ff-52ef-9fb7-c262233099ab"}},"staticQueryHashes":["1152384417","2706681444","3540528984"]}