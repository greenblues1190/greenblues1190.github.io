{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022/study-log/typescript-void-vs-undefined/","result":{"data":{"site":{"siteMetadata":{"title":"woo jeongmin","siteUrl":"https://woojeongmin.com"}},"markdownRemark":{"id":"7036a644-af45-578f-947f-ea7baa6cd61f","excerpt":"아래의 코드는 우아한테크코스 지원 플랫폼의 타입스크립트 전환 작업을 진행하면서 마주쳤던 이슈입니다. axios interceptors가 성공 응답을 처리할 때 body가 없는 경우 리턴 타입을 다음 둘 중에서 고민하고 있었습니다. 나 나 awaited된 값은 undefined…","html":"<p>아래의 코드는 우아한테크코스 지원 플랫폼의 타입스크립트 전환 작업을 진행하면서 마주쳤던 이슈입니다. axios interceptors가 성공 응답을 처리할 때 body가 없는 경우 리턴 타입을 다음 둘 중에서 고민하고 있었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">InterceptedResponse</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">InterceptedResponse</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\naxios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">use</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>InterceptedResponse<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> hasResponseData <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> hasResponseData <span class=\"token operator\">?</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">funtion</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">Promise&lt;void&gt;</code>나 <code class=\"language-text\">Promise&lt;undefined&gt;</code>나 awaited된 값은 undefined일테니 같을 것이라 생각했는데 타입을 undefined로 지정하면 에러가 발생했습니다. void는 ‘undefined를 반환한다’ 이상의 의미가 있는 것일까요?</p>\n<h2 id=\"자바스크립트의-void\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-void\" aria-label=\"자바스크립트의 void permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트의 void</h2>\n<p>void라는 키워드는 다른 프로그래밍 언어를 경험해봤다면 익숙할텐데요, 자바스크립트에도 void 연산자가 있습니다. ECMAScript에 따르면 void는:</p>\n<blockquote>\n<p>Syntax: <strong>void</strong> <a href=\"https://tc39.es/ecma262/#prod-UnaryExpression\">UnaryExpression</a></p>\n<ol>\n<li>Let expr be ? <a href=\"https://tc39.es/ecma262/#sec-evaluation\">Evaluation</a> of <a href=\"https://tc39.es/ecma262/#prod-UnaryExpression\"><em>UnaryExpression</em></a>.<br></li>\n<li>Perform ? <a href=\"https://tc39.es/ecma262/#sec-getvalue\">GetValue</a>(<em>expr</em>).<br></li>\n<li>Return <strong>undefined</strong>.</li>\n</ol>\n</blockquote>\n<p>다시 말해 void 연산자는,</p>\n<ol>\n<li>void 다음의 표현식을</li>\n<li>평가하고</li>\n<li><strong>undefined</strong>를 반환합니다.</li>\n</ol>\n<p>컴퓨터 과학에서의 평가란 표현식 또는 함수(<a href=\"https://en.wikipedia.org/wiki/Subroutine\">서브루틴</a>)의 결과값을 계산하는 것입니다. 값을 계산한다는 것은 코드를 실행한다는 의미와 동일합니다. void는 표현식 또는 함수를 실행한 뒤 반환된 값을 무시할 때 사용됩니다.</p>\n<p>대표적인 사용례는 undefined 원시값 생성, <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/void#iife\">IIFE</a>입니다. 하지만 ES6부터 지원되는 <code class=\"language-text\">let</code>과 <code class=\"language-text\">const</code>를 이용하면 블록 스코핑이 가능하기 때문에 IIFE를 위한 void의 필요성도 줄었습니다.</p>\n<h2 id=\"타입스크립트의-void\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-void\" aria-label=\"타입스크립트의 void permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트의 void</h2>\n<blockquote>\n<p>void represents the return value of functions which don’t return a value.</p>\n</blockquote>\n<p>아무 것도 반환하지 않는 함수의 반환 타입은 void입니다. 타입스크립트에서 늘 그렇게 사용해왔고 굳이 명시하지 않더라도 알아서 void로 추론합니다. 그리고 그러한 함수들의 반환 값은 undefined로 평가됩니다. 그 값을 undefined 타입으로 지정한 변수에 할당하면 어떻게 될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">voidFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> foo<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token function\">voidFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Type 'void' is not assignable to type 'undefined'.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>분명 반환된 값은 undefined인데 void 타입은 undefined에 할당할 수 없다고 합니다. void와 undefined는 차이가 있다는 말이네요.</p>\n<h3 id=\"void-타입의-표현식은-truthiness를-테스트할-수-없습니다\" style=\"position:relative;\"><a href=\"#void-%ED%83%80%EC%9E%85%EC%9D%98-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%80-truthiness%EB%A5%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%A0-%EC%88%98-%EC%97%86%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"void 타입의 표현식은 truthiness를 테스트할 수 없습니다 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>void 타입의 표현식은 truthiness를 테스트할 수 없습니다.</h3>\n<blockquote>\n<p>An expression of type ‘void’ cannot be tested for truthiness.</p>\n</blockquote>\n<p>void 함수의 결과값의 truthiness를 검증하는 경우 위의 에러 메시지가 출력됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">voidFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> voidResult <span class=\"token operator\">=</span> <span class=\"token function\">voidFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nvoidResult <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>voidResult<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// An expression of type 'void' cannot be tested for truthiness.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>undefined는 truthiness를 검증할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">undefinedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> undefinedResult <span class=\"token operator\">=</span> <span class=\"token function\">undefinedFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nundefinedResult <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>undefinedResult<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"substitutability\" style=\"position:relative;\"><a href=\"#substitutability\" aria-label=\"substitutability permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Substitutability</h3>\n<p>void를 반환하는 Contextual 함수 타이핑(식의 한변에만 타입을 지정하는 것)은 함수에게 아무것도 반환하지 않을 것을 강제하지 않습니다. 실제로도 아래 <em>f1</em>, <em>f2</em>, <em>f3</em>와 같이 값을 반환해도 아무런 타입 에러가 발생하지 않습니다. 다만 반환된 값이 무시됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">voidFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n\n<span class=\"token keyword\">const</span> f1<span class=\"token operator\">:</span> <span class=\"token function-variable function\">voidFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> f2<span class=\"token operator\">:</span> <span class=\"token function-variable function\">voidFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token boolean\">true</span>\n\n<span class=\"token keyword\">const</span> f3<span class=\"token operator\">:</span> <span class=\"token function-variable function\">voidFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>때문에 <code class=\"language-text\">Array.prototype.forEach</code>는 인자로 void를 반환하는 콜백 함수를 기대하지만 number 를 반환하는 <code class=\"language-text\">Array.prototype.push</code> 를 받더라도 유효합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token comment\">// Array&lt;number>.push(...): **number**</span>\n<span class=\"token comment\">// Array&lt;number>.forEach(callbackfn: (…) => **void**, …): void</span>\n\n<span class=\"token keyword\">const</span> src <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> dst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\nsrc<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>el <span class=\"token operator\">=></span> dst<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// OK</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>반대로 undefined를 반환하는 콜백 함수를 기대하는 경우 에러가 발생합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">undefinedForEach</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  list<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">callbackfn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>el<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">undefined</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n\n<span class=\"token keyword\">const</span> src <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> dst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token function\">undefinedForEach</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> el <span class=\"token operator\">=></span> dst<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Type 'number' is not assignable to type 'undefined'.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"generic-return-type\" style=\"position:relative;\"><a href=\"#generic-return-type\" aria-label=\"generic return type permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic Return Type</h3>\n<p>반환값이나 인자에서 제네릭을 사용해 타이핑하는 경우 void는 아무 것도 반환하지 않거나 주어지지 않음을 나타낼 때 유용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">whatever</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">promiseReturnsResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">whatever</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">promiseReturnsNothing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">whatever</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Type 'Response' is not assignable to type 'void'.</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>위 예제의 두 비동기 함수를 보면, API 요청이 fulfilled되면 <code class=\"language-text\">promiseReturnsString</code>은 string을, <code class=\"language-text\">promiseReturnsNothing</code>은 아무것도 반환하지 않습니다. <code class=\"language-text\">promiseReturnsNothing</code>에서 리턴하려고 하는 경우 에러가 발생합니다.</p>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>타입스크립트에서 void는 모호하고, 때로는 unknown처럼 동작합니다. 하지만 그것은 타입스크립트가 <em>‘void로 지정한 값은 사용할 수 없음’</em>을 표현하기 위해 의도한 동작입니다. 변수의 경우 undefined를 제외한 값을 할당할 수 없고 함수의 인자의 경우 caller가 반환값을 무시함을 뜻합니다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://tc39.es/ecma262/#sec-void-operator\">https://tc39.es/ecma262/#sec-void-operator</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/void\">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/void</a></li>\n<li><a href=\"https://hackernoon.com/is-void-forgotten-javascript-the-useful-parts-2de88901a1e0\">https://hackernoon.com/is-void-forgotten-javascript-the-useful-parts-2de88901a1e0</a></li>\n<li><a href=\"https://stackoverflow.com/a/58885486/15072068\">https://stackoverflow.com/a/58885486/15072068</a></li>\n<li><a href=\"https://github.com/Microsoft/TypeScript/wiki/FAQ#why-are-functions-returning-non-void-assignable-to-function-returning-void\">https://github.com/Microsoft/TypeScript/wiki/FAQ#why-are-functions-returning-non-void-assignable-to-function-returning-void</a></li>\n<li><a href=\"https://betterprogramming.pub/what-is-void-in-typescript-2d21d4936537\">https://betterprogramming.pub/what-is-void-in-typescript-2d21d4936537</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/2022/study-log/typescript-void-vs-undefined/#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-void\">자바스크립트의 void</a></li>\n<li>\n<p><a href=\"/2022/study-log/typescript-void-vs-undefined/#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-void\">타입스크립트의 void</a></p>\n<ul>\n<li><a href=\"/2022/study-log/typescript-void-vs-undefined/#void-%ED%83%80%EC%9E%85%EC%9D%98-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%80-truthiness%EB%A5%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%A0-%EC%88%98-%EC%97%86%EC%8A%B5%EB%8B%88%EB%8B%A4\">void 타입의 표현식은 truthiness를 테스트할 수 없습니다.</a></li>\n<li><a href=\"/2022/study-log/typescript-void-vs-undefined/#substitutability\">Substitutability</a></li>\n<li><a href=\"/2022/study-log/typescript-void-vs-undefined/#generic-return-type\">Generic Return Type</a></li>\n</ul>\n</li>\n<li><a href=\"/2022/study-log/typescript-void-vs-undefined/#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n<li><a href=\"/2022/study-log/typescript-void-vs-undefined/#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>","frontmatter":{"title":"[TypeScript] void vs undefined","date":"September 18, 2022","description":null,"tags":["typescript"],"cover":null}},"previous":{"fields":{"slug":"/2022/study-log/what-happens-when-you-type-wwwnavercom/"},"frontmatter":{"title":"브라우저 주소창에 www.naver.com을 치면 일어나는 일"}},"next":{"fields":{"slug":"/2022/cypress-ci/"},"frontmatter":{"title":"Cypress CI 테스트 자동화 라이브러리 개발기"}}},"pageContext":{"id":"7036a644-af45-578f-947f-ea7baa6cd61f","previousPostId":"ad9ec661-2634-5e48-9eb2-b6d413db64f4","nextPostId":"434b9581-92b4-51c6-b79c-e20107026cda"}},"staticQueryHashes":["1152384417","2706681444","3540528984"]}